# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HfIhPE-c0FQI5D_S3SccAlEjbFZKFYOP
"""

import numpy as np
import pandas as pd
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import Pipeline

from google.colab import drive
drive.mount('/content/drive')

imdb_dataset = pd.read_csv('/content/drive/MyDrive/AI/IMDB-Dataset.csv', nrows=20000)
imdb_dataset.head()

from bs4 import BeautifulSoup
import re

#Removing the html strips
def strip_html(text):
    soup = BeautifulSoup(text, "html.parser")
    return soup.get_text()

#Removing the square brackets
def remove_between_square_brackets(text):
    return re.sub('\[[^]]*\]', '', text)

#Removing the noisy text
def denoise_text(text):
    text = strip_html(text)
    text = remove_between_square_brackets(text)
    return text
#Apply function on review column
imdb_dataset['review']=imdb_dataset['review'].apply(denoise_text)
imdb_dataset.head()

#Define function for removing special characters
def remove_special_characters(text, remove_digits=True):
    pattern=r'[^a-zA-z0-9\s]'
    text=re.sub(pattern,'',text)
    return text
#Apply function on review column
imdb_dataset['review']=imdb_dataset['review'].apply(remove_special_characters)

X_train, X_test, y_train, y_test = train_test_split(imdb_dataset ['review'], imdb_dataset['sentiment'],
                                                   test_size=0.2, random_state=0,
                                                   shuffle=True, stratify=imdb_dataset['sentiment'])

X_train.shape, X_test.shape

from sklearn.svm import SVC

clf_svm = Pipeline([('tfidf', TfidfVectorizer()),
                    ('svm', SVC())])

clf_svm.fit(X_train, y_train)

from sklearn.metrics import classification_report
# Sử dụng mô hình SVM đã thay thế
y_pred_svm = clf_svm.predict(X_test)
# Độ chính xác của mô hình SVM
accuracy_svc = accuracy_score(y_test, y_pred_svm)
print("Accuracy for SVM:", accuracy_svc)
# In kết quả báo cáo
print("Classification Report for SVM:")
print(classification_report(y_test, y_pred_svm))

import pickle
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Lưu mô hình vào Google Drive
with open('/content/drive/MyDrive/AI/model.pkl', 'wb') as file:
    pickle.dump(clf_svm, file)

model = pickle.load(open('/content/drive/MyDrive/AI/model.pkl', 'rb'))
model.predict(['you have won lottery ticket worth $1000, please click here to claim',
            'hi, how are you doing today?'])